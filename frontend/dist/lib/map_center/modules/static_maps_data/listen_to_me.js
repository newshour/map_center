// Generated by CoffeeScript 1.3.3
(function() {
  var buildStates, key_ranges, root, setMapData, state_counts, state_data, video_counts,
    _this = this;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.nhmcStatic = {};

  state_data = 'https://nh-ltm.s3.amazonaws.com/summary.js';

  root.state_rollups = [];

  state_counts = [];

  video_counts = [];

  key_ranges = [];

  $.ajax({
    url: state_data,
    dataType: 'jsonp',
    cache: true,
    jsonpCallback: 'showSummary',
    success: function(data) {
      buildStates(data);
      return setMapData();
    }
  });

  buildStates = function(states) {
    var max, state, x, _i, _len;
    _.each(states, function(data, area) {
      var issues, state;
      state = {
        name: area
      };
      state.count = _.reduce(data.political_affiliation, function(total, num, key) {
        return total + num;
        return 0;
      });
      video_counts.push(state.count);
      state.gender = data.gender;
      state.majority_party = _.chain(data.political_affiliation).map(function(share, party) {
        return [party, share];
      }).sortBy(function(entry) {
        return entry[1];
      }).last().value();
      issues = _.chain(data.categories).map(function(count, cat) {
        return [cat, count];
      }).sortBy(function(entry) {
        return entry[1];
      }).value().reverse();
      state.top_issues = _.pluck(issues.slice(0, 2), 0);
      return state_rollups.push(state);
    });
    for (_i = 0, _len = state_rollups.length; _i < _len; _i++) {
      state = state_rollups[_i];
      state_counts["" + state.name] = state.count;
    }
    max = _.max(video_counts);
    key_ranges = (function() {
      var _j, _results;
      _results = [];
      for (x = _j = 1; _j <= 5; x = ++_j) {
        _results.push(Math.round((x / max) * 100));
      }
      return _results;
    })();
    return root.VideoDashboard.init();
  };

  setMapData = function() {
    return root.nhmcStatic = {
      'breaks': key_ranges,
      'colors': ['#ffffcc', '#bae4bc', '#7bccc4', '#43a2c', '#0868ac'],
      'decimalPlaces': 0,
      'suffix': '%',
      'areas': state_counts
    };
  };

  root.fireOverlay = function(state) {
    root.VideoDashboard.fetchState(this.nhmcData.state);
    return $('#tm-video-overlay').fadeIn(200);
  };

  root.nhmcStaticTooltipFormatter = function(thisFIPS, thisState, thisCounty, countyOnly, currentData) {
    var dataValue, key_issues, maj_party, party_sway, state_info, tooltipText, video_count;
    tooltipText = [];
    state_info = _.find(state_rollups, function(state) {
      return state.name.toLowerCase() === thisState.toLowerCase();
    });
    tooltipText.push('<div id="tm-tooltip-wrapper"><div class="tm_title">' + thisState + '</div>');
    if (state_info) {
      maj_party = state_info.majority_party[0];
      party_sway = Math.round(state_info.majority_party[1] / state_info.count * 100).toString();
      video_count = state_info.count.toString();
      key_issues = state_info.top_issues.join(', ');
      tooltipText.push('<div id="tm-tooltip-exp"><div class="tm_party_favor">' + maj_party + '<b>' + party_sway + '%</b></div>');
      tooltipText.push('<div class="tm_video_count"><b>' + video_count + ("</b>total " + (state_info.count > 1 ? 'videos' : 'video') + "</div>"));
      tooltipText.push('<div class="tm_key_issues"><b>key issues: </b>' + key_issues + '</div>');
      tooltipText.push('</div>');
    }
    if (typeof currentData.areas[thisState] === 'undefined') {
      tooltipText.push('Unavailable');
    } else {
      dataValue = currentData.areas[thisState];
    }
    tooltipText.push('</div>');
    return tooltipText.join('');
  };

  $(document).one('coreInitialized', function() {
    var state, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = state_rollups.length; _i < _len; _i++) {
      state = state_rollups[_i];
      _results.push(nhmc.geo.usGeo[state.name].statePath.connect('onclick', nhmc.geo.usGeo[state.name].statePath, fireOverlay));
    }
    return _results;
  });

}).call(this);
